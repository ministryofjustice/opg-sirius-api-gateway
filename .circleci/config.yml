version: 2.1

workflows:
  path_to_live:
    jobs:
      - sirius-api-gateway/unit_test_lambdas:
          name: unit_test_lambdas
      - sirius-api-gateway/package_lambda_artifact:
          name: package_lambda_artifact
          requires: [unit_test_lambdas]
      - sirius-api-gateway/build_gem_cache:
          name: build_gem_cache
      - sirius-api-gateway/lint_terraform:
          name: lint_terraform
          requires: [package_lambda_artifact]
      - sirius-api-gateway/build_api_test_file:
          name: build_api_test_file
          requires: [build_gem_cache]
      - sirius-api-gateway/apply_terraform:
          filters:
            branches:
              ignore: [master]
          name: apply_development
          workspace: development
          requires:
            [lint_terraform, package_lambda_artifact]
      - sirius-api-gateway/test_sirius_access:
          name: test_sirius_access
          aws-account: '288342028542'         # Sirius dev AWS account
          requires: [apply_development]

      - sirius-api-gateway/newman_api_test:
          filters:
            branches:
              ignore: [master]
          name: newman_development
          workspace: development
          requires: [build_api_test_file, apply_development]

      - sirius-api-gateway/apply_terraform:
          filters:
            branches:
              only: [master]
          name: apply_production
          workspace: production
          requires: [lint_terraform]
      - sirius-api-gateway/newman_api_test:
          filters:
            branches:
              only: [master]
          name: newman_production
          workspace: production
          requires: [build_api_test_file, apply_production]

      - sirius-api-gateway/test_sirius_access:
          name: test_sirius_access_production
          aws-account: '649098267436'         # Sirius Prod AWS account
          requires: [apply_production]


orbs:
  sirius-api-gateway:
    executors:
      ruby:
        docker: [image: circleci/ruby:latest-browsers]
      terraform:
        docker: [image: hashicorp/terraform:0.11.14]
      python:
        docker: [image: circleci/python]
      python-build:
        docker: [image: python:alpine]
      newman:
        docker: [image: postman/newman:alpine]
    commands:
      relocate_lambda_packages:
        steps:
          - run:
              name: relocate_lambda_packages
              command: |
                mv /tmp/*.zip ~/project/
    jobs:
      lint_terraform:
        executor: terraform
        environment:
          TF_WORKSPACE: "development"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - relocate_lambda_packages
          - run:
              name: Init Terraform
              command: |
                terraform init
          - run:
              name: Lint Terraform
              command: |
                terraform --version
                terraform validate
      build_gem_cache:
        executor: ruby
        steps:
          - checkout
          - restore_cache:
              keys:
                ['gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile" }}']
          - run: bundle install --path vendor/bundle --quiet
          - save_cache:
              key: gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile" }}
              paths: [vendor/bundle]
      apply_terraform:
        parameters:
          workspace:
            description: Terraform Workspace name
            type: string
            default: development
        environment:
          TF_WORKSPACE: "<< parameters.workspace >>"
        executor: terraform
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - relocate_lambda_packages
          - run: terraform init
          - run: terraform apply -auto-approve | ./redact_output.sh

      unit_test_lambdas:
        #
        # Runs the unit tests packaged with the lambda
        #   We do this separately to `package_lambda_artifact` due to the extra requirements that are installed.
        #
        executor: python-build
        steps:
          - checkout
          - run: pip3 install -r lambdas/requirements.txt -r lambdas/requirements-dev.txt --target ./lambdas/vendor
          - run: cd ./lambdas; python vendor/pytest.py --ignore=./vendor
      package_lambda_artifact:
        executor: python-build
        steps:
          - checkout
          - run: apk add zip
          - run: pip3 install -r lambdas/requirements.txt  --target ./lambdas/vendor
          - run: cd ./lambdas; zip -r9 /tmp/lambda_artifact.zip .
          - persist_to_workspace:
              root: /tmp
              paths:
                - lambda_artifact.zip


      build_api_test_file:
        #
        # Builds the API test files
        #
        executor: ruby
        steps:
          - checkout
          - restore_cache:
              keys:
                ['gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile" }}']
          - run: bundle install --path vendor/bundle --quiet
          - run: bundle exec rake lambda:buildapitestfile
          - persist_to_workspace:
              root: /tmp
              paths:
                - generated.postman_environment.json


      newman_api_test:
        #
        # Runs Postman integration tests via Newman
        #
        parameters:
          workspace:
            description: Terraform Workspace name
            type: string
            default: development
        environment:
          TF_WORKSPACE: "<< parameters.workspace >>"
        executor: newman
        steps:
          - checkout
          - run: apk add ca-certificates -q
          - attach_workspace:
              at: /tmp
          - run: newman run tests/gateway-tests.postman_collection.json -e /tmp/generated.postman_environment.json


      test_sirius_access:
        #
        # Tests if the provisioned lambda can communicate with the Sirius membrane.
        #   - Does it get a positive response from the health check; and
        #   - Does it get a positive response from an authentication attempt.
        #
        parameters:
          aws-account:
            description: AWS account the lambda is deployed to
            type: string
        executor: python
        steps:
          - run: sudo pip3 install awscli --upgrade
          - run:
              # Assume the needed role and invoke the lambda
              name: Invoke simulate_sirius_access lambda
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::<< parameters.aws-account >>:role/ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                aws lambda invoke --invocation-type RequestResponse --function-name simulate_sirius_access --region eu-west-1 --log-type Tail outputfile.txt > lambda-result.json
          - run:
              # Output the result in full to aid in fault finding
              name: Dump output
              command: cat lambda-result.json
          - run:
              # Decode the base64 element to aid in fault finding
              name: Decode lambda log
              command: cat lambda-result.json | jq -r '.LogResult' | base64 -d
          - run:
              # Result an error from this step if an error was thrown by the lambda
              name: Test to ensure there was no error
              # There's an error if the 'FunctionError' key is within the response
              # If has() does not return false, an empty line is returned, thus `read line || exit 1` executes the latter.
              command: cat lambda-result.json | jq -r 'has("FunctionError")' | grep false | read line || exit 1
